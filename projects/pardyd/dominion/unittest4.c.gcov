        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdio.h>
        -:    4:#include <assert.h>
        -:    5:
        -:    6:/*
        -:    7:	UNIT TEST: buyCard()
        -:    8:*/
        -:    9:
function main called 5 returned 100% blocks executed 75%
        -:   10:int main() {
        5:   11:  int passed = 0;
        5:   12:  int p1 = 1;
        5:   13:  int money1 = 4;
        5:   14:  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, great_hall};
        -:   15:  struct gameState g;
        5:   16:  initializeGame(2, k, 100, &g);
        5:   17:  printf("UNIT TEST: buyCard() function\n");
        5:   18:  g.whoseTurn = p1;
        5:   19:  g.coins = money1;
        5:   20:  buyCard(silver, &g);
        5:   21:  printf("Player 1 bought silver.\n");
        5:   22:  printf("Top of discard: %d.\n", g.discard[g.whoseTurn][g.discardCount[g.whoseTurn]]);
        5:   23:  if (g.discard[g.whoseTurn][g.discardCount[g.whoseTurn - 1]] == silver){
branch  0 taken 100%
branch  1 taken 0%
        5:   24:  	printf("PASSED\n");
        5:   25:  } else {
    #####:   26:    printf("FAILED\n");
    #####:   27:    passed = 1;
        -:   28:  }
        5:   29:  if (passed == 0)
branch  0 taken 100%
branch  1 taken 0%
        5:   30:    printf("PASSING: buyCard()\n");
        -:   31:  else
    #####:   32:    printf("FAILED: buyCard()\n");
        5:   33:  return 0;
        -:   34:}
